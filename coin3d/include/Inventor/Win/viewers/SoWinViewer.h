/**************************************************************************
 *
 *  This file is part of the Coin GUI binding libraries.
 *  Copyright (C) 2000 by Systems in Motion.  All rights reserved.
 *
 *  The libraries this file is part of is free software; you can
 *  redistribute them and/or modify them under the terms of the GNU
 *  Lesser General Public License version 2.1 as published by the
 *  Free Software Foundation.  See the file LICENSE.LGPL at the root
 *  directory of the distribution for all the details.
 *
 *  If you want to use the Coin GUI binding libraries for applications
 *  not compatible with the LGPL, contact SIM about acquiring a
 *  Professional Edition License.
 *
 *  Systems in Motion, Prof Brochs gate 6, N-7030 Trondheim, NORWAY
 *  http://www.sim.no/ support@sim.no Voice: +47 22114160 Fax: +47 22207097
 *
 **************************************************************************/

// Generated automatically from SoGuiViewer.h.in by configure.
// $Id: SoWinViewer.h,v 1.1 2008/09/30 19:09:56 zlj Exp $

#ifndef SOWIN_VIEWER_H
#define SOWIN_VIEWER_H

/**************************************************************************\
 *
 *  A WORD OF ADVICE
 *
 *  It is fruitless to modify the contents of the SoWinViewer.h file
 *  because it is autogenerated by configure from the SoAnyViewer.h.in
 *  file which you will find in the src/Inventor/Win/common/ directory.
 *  Do your modifications to that file instead.
 *
\**************************************************************************/

// Workaround for OIV problem on Linux in SbBasic.h.
#include <math.h>

#include <Inventor/SbTime.h>
#include <Inventor/SoType.h>
#include <Inventor/SbLinear.h>

#include <Inventor/Win/SoWinRenderArea.h>

class SoCallbackList;
class SoBaseColor;
class SoCamera;
class SoComplexity;
class SoDirectionalLight;
class SoDrawStyle;
class SoGetBoundingBoxAction;
class SoGroup;
class SoLightModel;
class SoMaterialBinding;
class SoNode;
class SoPolygonOffset;
class SoSensor;
class SoSeparator;
class SoSwitch;
class SoTimerSensor;

class SoWinViewer;

typedef void SoWinViewerCB(
    void * data, SoWinViewer * viewer);
typedef void SoWinViewerFPSCB(
    float fps, void * data, SoWinViewer * viewer);
typedef void SoWinViewerDecimationPercentageCB(
    float percentage, void * data, SoWinViewer * viewer);

// *************************************************************************

class SOWIN_DLL_API SoWinViewer : public SoWinRenderArea
{
	SOWIN_OBJECT_ABSTRACT_HEADER(SoWinViewer, SoWinRenderArea);
	
	
public:
	enum Type
	{
		BROWSER,
		EDITOR
	};
	
	enum DecimationStrategy
	{
		NORMAL,
		FIXED_NUM_TRIANGLES,
		FRAMES_PER_SECOND,
		FIXED_PERCENTAGE
	};
	
	enum DrawStyle
	{
		VIEW_AS_IS,
		VIEW_HIDDEN_LINE,
		VIEW_NO_TEXTURE,
		VIEW_LOW_COMPLEXITY,
		VIEW_LINE,
		VIEW_POINT,
		VIEW_BBOX,
		VIEW_LOW_RES_LINE,
		VIEW_LOW_RES_POINT,
		VIEW_SAME_AS_STILL,
		VIEW_WIREFRAME_OVERLAY
	};
	
	enum DrawType
	{
		STILL = 0,
		INTERACTIVE
	};
	
	enum BufferType
	{
		BUFFER_SINGLE,
		BUFFER_DOUBLE,
		BUFFER_INTERACTIVE
	};
	
	virtual void setCamera(SoCamera * camera);
	SoCamera * getCamera(void) const;
	
	virtual void setCameraType(SoType type);
	SoType getCameraType(void) const;
	
	virtual void viewAll(void);
	
	virtual void saveHomePosition(void);
	virtual void resetToHomePosition(void);
	
	virtual void setHeadlight(SbBool enable);
	SbBool isHeadlight(void) const;
	SoDirectionalLight * getHeadlight(void) const;
	
	virtual void setDrawStyle(SoWinViewer::DrawType type, SoWinViewer::DrawStyle style);
	SoWinViewer::DrawStyle getDrawStyle(const SoWinViewer::DrawType type) const;
	
	virtual void setBufferingType(SoWinViewer::BufferType type);
	SoWinViewer::BufferType getBufferingType(void) const;
	
	virtual void setViewing(SbBool enable);
	SbBool isViewing(void) const;
	
	virtual void setCursorEnabled(SbBool enable);
	SbBool isCursorEnabled(void) const;
	
	void setAutoClipping(SbBool enable);
	SbBool isAutoClipping(void) const;
	
	virtual void setStereoViewing(SbBool enable);
	SbBool isStereoViewing(void) const;
	
	virtual void setStereoOffset(const float dist);
	float getStereoOffset(void) const;
	
	void setDetailSeek(const SbBool enable);
	SbBool isDetailSeek(void) const;
	
	void setSeekTime(const float seconds);
	float getSeekTime(void) const;
	
	void addStartCallback(SoWinViewerCB * func, void * data = NULL);
	void addFinishCallback(SoWinViewerCB * func, void * data = NULL);
	void removeStartCallback(SoWinViewerCB * func, void * data = NULL);
	void removeFinishCallback(SoWinViewerCB * func, void * data = NULL);
	
	void copyView(const SbTime eventTime);
	void pasteView(const SbTime eventTime);
	
	virtual void recomputeSceneSize(void);
	
	void setDecimationStrategy(const DecimationStrategy strategy);
	DecimationStrategy getDecimationStrategy(void) const;
	
	void setGoalNumberOfTriangles(const int32_t goal);
	int32_t getGoalNumberOfTriangles(void) const;
	
	void setGoalFramesPerSecond(const float goal);
	float getGoalFramesPerSecond(void) const;
	
	void setFixedPercentage(const float percent);
	float getFixedPercentage(void) const;
	
	void enableFullRenderingWhenStill(const SbBool enable);
	SbBool isFullRenderingWhenStill(void) const;
	SbBool isStillNow(void) const;
	
	void setFramesPerSecondCallback(SoWinViewerFPSCB * callback, void * data);
	
	void setNumSamples(const int numFrames);
	int getNumSamples(void) const;
	
	void setDecimationPercentageCallback(
	    SoWinViewerDecimationPercentageCB * cb, void * data = NULL);
	float getCurrentDecimationPercentage(void) const;
	
	// Overloaded from parent class.
	virtual void setDoubleBuffer(const SbBool enable);
	
	virtual void setSceneGraph(SoNode * root);
	virtual SoNode * getSceneGraph(void);
	
protected:
	SoWinViewer(
	    HWND parent,
	    const char * name,
	    SbBool embed,
	    Type type,
	    SbBool build);
	~SoWinViewer(void);
	
	virtual void sizeChanged(const SbVec2s size);
	virtual void setSeekMode(SbBool enable);
	SbBool isSeekMode(void) const;
	SbBool seekToPoint(const SbVec2s screenpos);
	
	virtual void actualRedraw(void);
	virtual SbBool processSoEvent(const SoEvent * const event);
	SbBool processCommonEvents(MSG * event);
	
	void interactiveCountInc(void);
	void interactiveCountDec(void);
	int getInteractiveCount(void) const;
	
	void setSeekDistance(const float distance);
	float getSeekDistance(void) const;
	void setSeekValueAsPercentage(const SbBool on);
	SbBool isSeekValuePercentage(void) const;
	
	virtual void toggleCameraType(void);
	
protected:
	SoCamera * camera;
	SoWinViewer::Type type;
	SbBool viewingFlag;
	SbBool altSwitchBack;
	
	SoGetBoundingBoxAction * autoClipBboxAction;
	float minimumNearPlane;
	
	SoSeparator * sceneRoot;
	SoNode * sceneGraph;
	
private:
	class SoWinViewerP * pimpl;
	friend class SoWinViewerP;
	
}; // class SoWinViewer

// *************************************************************************

#endif // ! SOWIN_VIEWER_H
